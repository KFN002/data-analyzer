// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: databases.sql

package datasets

import (
	"context"
	"database/sql"
)

const createDatabase = `-- name: CreateDatabase :one
INSERT INTO databases (name, descr, dsn, token)
VALUES ($1, $2, $3, $4) RETURNING database_id, type, name, descr, dsn, token
`

type CreateDatabaseParams struct {
	Name  string
	Descr sql.NullString
	Dsn   sql.NullString
	Token sql.NullString
}

func (q *Queries) CreateDatabase(ctx context.Context, arg CreateDatabaseParams) (Database, error) {
	row := q.db.QueryRowContext(ctx, createDatabase,
		arg.Name,
		arg.Descr,
		arg.Dsn,
		arg.Token,
	)
	var i Database
	err := row.Scan(
		&i.DatabaseID,
		&i.Type,
		&i.Name,
		&i.Descr,
		&i.Dsn,
		&i.Token,
	)
	return i, err
}

const getDatabaseByID = `-- name: GetDatabaseByID :one
SELECT database_id, type, name, descr, dsn, token FROM databases
WHERE database_id = $1 LIMIT 1
`

func (q *Queries) GetDatabaseByID(ctx context.Context, databaseID int64) (Database, error) {
	row := q.db.QueryRowContext(ctx, getDatabaseByID, databaseID)
	var i Database
	err := row.Scan(
		&i.DatabaseID,
		&i.Type,
		&i.Name,
		&i.Descr,
		&i.Dsn,
		&i.Token,
	)
	return i, err
}

const updateDatabase = `-- name: UpdateDatabase :one
UPDATE databases
SET 
    name = $2,
    descr = $3,
    dsn = $4,
    token = $5
WHERE database_id = $1 RETURNING database_id, type, name, descr, dsn, token
`

type UpdateDatabaseParams struct {
	DatabaseID int64
	Name       string
	Descr      sql.NullString
	Dsn        sql.NullString
	Token      sql.NullString
}

func (q *Queries) UpdateDatabase(ctx context.Context, arg UpdateDatabaseParams) (Database, error) {
	row := q.db.QueryRowContext(ctx, updateDatabase,
		arg.DatabaseID,
		arg.Name,
		arg.Descr,
		arg.Dsn,
		arg.Token,
	)
	var i Database
	err := row.Scan(
		&i.DatabaseID,
		&i.Type,
		&i.Name,
		&i.Descr,
		&i.Dsn,
		&i.Token,
	)
	return i, err
}
